	//------------------------------------------------------------------------
	// 매개변수로 들어온 데이터가 비어있거나 [공백]으로 구성되어 있으면 
	// true 를 리턴, 아니면 false 리턴하는 함수 선언
	//------------------------------------------------------------------------
	function isEmpty( str ){	// str => 문자열이 저장되는 매개변수
	
/*	//------------------------------------------------------------------------
		try{
			var flag = false;
			if( str.split(" ").join("")=="" ) {
				flag = true;
			}
			return flag;
		}catch(e){
			alert("isEmpty 함수 호출 시 예외가 발생!" + e.message);
			return false;
		}	
	}
*/	
	//------------------------------------------------------------------------
	// 아래 코드가 가독성과 유지보수개발에 유리 하다.  [효율적인 코드]
	//------------------------------------------------------------------------
	var flag = false;
	//------------------------------------------------------------------------
	// try 구문 선언. try 구문 안에는 예외발생 가능성 있는 코드가 삽입됨.
	//------------------------------------------------------------------------
	
	try{
		// 매개변수로 들어온 문자가 길이가 없거나 공백으로 이루어져 있으면 
		// flag 변수에 true 저장하기
		if( str.split(" ").join("")=="" ) {
			flag = true;
		}
	//------------------------------------------------------------------------
	// catch 구문선언.
	// catch 구문 안에는 try 구문 에서 예외 발생 시 실행할 코드가 삽입됨.
	// catch 구문의 매개변수 e 에는 예외를 관리하는 객체의 메이ㅜ주가 들어온다.
	// catch(~){~} 구문은 try 구문에서 예외발생 시 호출하는 일종의 함수와 비슷하다.   
	//------------------------------------------------------------------------
	}catch(e){
		alert("isEmpty 함수 호출 시 예외가 발생!" + e.message);
		flag = false;
	}	
	//------------------------------------------------------------------------
	// flag 변수 안의 데이터를 리턴하기.
	//------------------------------------------------------------------------
	return flag;
	//------------------------------------------------------------------------
}



	
	//------------------------------------------------------------------------
	// [이메일] 유효성 체크 공용함수 처리.
	// 매개변수로 들어온 이메일 문자가 이메일 문자 패턴에 맞으면 true 리턴하기.
	// 틀리면 false 리턴하기.
	//------------------------------------------------------------------------
	function isValidEmail( email ){	// email => 검사할 문자열(이메일)이 저장되는 매개변수
		// 이메일 문자열을 체크하는 RegExp 객체 생성하기.
		var flag = false;
		try{
			//------------------------------------------------------------------------
			// 이메일의 문자의 패턴을 관리하는 RegExp 객체 생성하기
			// RegExp 객체의 test 메소드를 호출하여 매개변수로 들어온 문자의
			// 이메일 문자 패턴에 맞는지 여부를 구해 flag 변수에 저장하기
			//------------------------------------------------------------------------
			var regExp = new RegExp(/^([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/);
			flag = regExp.test(email);
		}
		catch(e){
			alert("isValidEmail 함수 호출 시 예외가 발생!" + e.message);
			flag = false;
		}
		//------------------------------------------------------------------------
		// flag 변수 안의 데이터를 리턴하기.
		//------------------------------------------------------------------------
		return flag;
	}

	/*
	try{
	}
	catch(e){
		alert("isValidEmail 함수 호출 시 예외가 발생!" + e.message);
		flag = false;
	}
	return flag;
	*/

	//------------------------------------------------------------------------
	// [핸드폰] 유효성 체크 공용함수 처리.
	// 매개변수로 들어온 핸드폰 문자가 핸드폰 문자 패턴에 맞으면 true 리턴하기.
	// 틀리면 false 리턴하기.
	//------------------------------------------------------------------------
	function isValidPhone( phone ){	// phone => 검사할 문자열(핸드폰)이 저장되는 매개변수
		// 이메일 문자열을 체크하는 RegExp 객체 생성하기.
		var regExp = new RegExp(/^01([0|1|6|7|8|9])-{0,1}[0-9]{3,4}-{0,1}[0-9]{4}$/);
		return regExp.test(phone);
	}


	//------------------------------------------------------------------------
	// [문자열]의 패턴식 공용함수 처리.
	// 매개변수로 들어온 RegExp 객체와 검사문자열을 이용하여 
	// 검사문자열이 RegExp 객체가 관리하는 문자 패턴에 맞으면 true 리턴하기.
	// 틀리면 false 리턴하기.
	//------------------------------------------------------------------------
	function isValidPattern( regExpObj, targetStr ){	// regExpObj => RegExp 객체의 메모리 위치 주소값이 저장되는 매개변수
														// targetStr => 패턴을 검사할 문자열이 저장되는 매개변수
		
		var flag = false;
		try{
			flag = regExpObj.test(targetStr);
		}
		catch(e){
			alert("isValidEmail 함수 호출 시 예외가 발생!" + e.message);
			flag = false;
		}
		return flag;
	}

	//------------------------------------------------------------------------
	// [checkbox] 또는 [radio] 의 체크 개수구해서 리턴하는 함수 선언
	//------------------------------------------------------------------------
	function getCheckedCnt( arrObj ){	// Array 객체의 메위주가 저장되는 매개변수선언.
										// Array 객체안의 배열 변수안에는 Radio 객체 또는  
										// checkbox 객체의 메위주가 들어 있다.
		//------------------------------------------------------------------------
		// Radio 또는 checkbox 의 체크 개수가 저장되는 변수 checkedCnt 선언하고 0 저장..
		//------------------------------------------------------------------------
		var checkedCnt = 0;

	try{ // 예외처리

		//------------------------------------------------------------------------
		// len 변수 선언하고 매개변수로 들어온 Array 객체의 배열변수 개수를 구해 저장하기.
		//------------------------------------------------------------------------
		var len = arrObj.length

		//------------------------------------------------------------------------
		// len 변수안의 undefined 면 즉, 
		// 매개변수로 Array 객체가 안들어오고 다른 객체 즉, checkbox 객체 또는 Radio 객체가 들어오면 
		// 존재하지 않는 length 라는 속성변수에는 undefined 가 들어 있다. 
		// Radio 객체 또는 Checkbox 객체의 메위주 상상도를 살펴봐야 한다.
		//------------------------------------------------------------------------
		if( len==undefined ){
			if( arrObj.checked==false ){
				return 0;
			}else{
				return 1;
			}
		}


		//------------------------------------------------------------------------
		// 반복문 선언. 반복문은 0~len 변수안의 배열변수 개수 미만 만큼 돈다.
		// 반복문을 돌려서 Array 객체의 배열변수 안에 저장된 Radio 객체 또는 checkbox 객체에 접근하기 위함.
		//------------------------------------------------------------------------
		for( var i=0; i<len; i++){
			// 만약 i번째 배열변수 안의 Radio 객체 또는 checkbox 객체의 속성변수 checked 에 true가 저장되어 있으면
			// checkedCnt 변수 안의 숫자를 1 업데이트하기
			// 즉, i번째 Radio 또는 checkbox 입력양식에 체크가 되어 있으면 checkedCnt 변수 안의 숫자를 1 업데이트 하기.
			if( arrObj[i].checked ) { checkedCnt++; }
		}
	}catch(e){
			alert( "getCheckedCnt 함수 호출 시 에러가 발생했음" );
			checkedCnt = 0;
	}
	//------------------------------------------------------------------------
	// checkedCnt 변수 안의 데이터 리턴하기. 즉, Radio 또는 checkbox 입력양식에 체크 개수 리턴하기.
	//------------------------------------------------------------------------
	return checkedCnt;

	}	



/*
	---------------------------------
	예외(=exception)
	---------------------------------
		자스에서 예외란 웹브라우저가 [감지]할수 있는 오류
	---------------------------------
	예외 처리
	---------------------------------
		예외 발생할 경우 try{}catch(e){~}finally{} 구문을 
		사용하여 프로그램의 갑작스런 중단을 막고 
		원하는 방향으로 프로그램을 진행하는 것을 말한다.
	---------------------------------
	try~catch~finally 구문
	---------------------------------
		try{
			예외 발생할 가능성이 있는 코드
		}
		catch(e){
			예외가 발생했을 때 실행할 코드		
		}
		finally{
			예외가 발생하든 안하든 무조건 실행할 코드		
		}
*/



	//------------------------------------------------------------------------
	// 현재시점 날짜의 요일
	// 현재 시각의 요일을 리턴하는 함수 선언. 
	//------------------------------------------------------------------------
	function getTodayWeek(){
		// ------------------------------
		// today 변수 선언. 현재 날짜를 관리하는 Date 객체 생성. Date 객체의 메위주를 today변수에 저장.
		// ------------------------------
		var today = new Date();
		// ------------------------------
		// weekNo 변수 선언. Date 객체의 getDay 메소드 호출하여 현재 요일 번호 얻어 weekNO 변수에 저장하기
		// ------------------------------
		var weekNo = today.getDay();
		// ------------------------------
		// week 변수 선언. "일요일" 저장하기 
		// ------------------------------
		var week = "일요일";
		// ------------------------------
		// 요일 번호에 따라 week 변수에 오는 요일문자 저장하기.
		// ------------------------------
		if( weekNo==1 ){
			week = "월요일";
		}
		else if( weekNo==2 ){
			week = "화요일";
		}
		else if( weekNo==3 ){
			week = "수요일";
		}
		else if( weekNo==4 ){
			week = "목요일";
		}
		else if( weekNo==5 ){
			week = "금요일";
		}
		else if( weekNo==6 ){
			week = "토요일";
		}
		// ------------------------------
		// 오늘 오일 문자 리턴하기
		// ------------------------------
		return week;
	}
	/*
	//------------------------------------------------------------------------
	// 위의 요일 리턴 함수와 똑같은 출력을 하는 함수 형식이다.  
	//------------------------------------------------------------------------
	function getTodayWeek(){
		return["일요일","월요일","화요일","수요일","목요일","금요일","토요일"][new Date().getDay()]
		// 위는 new Array("일요일","월요일","화요일","수요일","목요일","금요일","토요일")[1] 같은 형식이다.
	}
	*/


	//------------------------------------------------------------------------
	// 현재 시각의 년-월-일(요일)을 문자로 리턴하는 함수 선언.
	//------------------------------------------------------------------------
	function getTodayYMDW(){
		// ------------------------------
		// today 변수 선언. 현재 날짜를 관리하는 Date 객체 생성. Date 객체의 메위주를 today변수에 저장.
		// ------------------------------
		var today = new Date();
		var year = today.getFullYear();
		var month = today.getMonth()+1;
			if(month<10) {month = "0"+month;}
		var date = today.getDate();
			if(date<10) {date = "0"+date;}
		var week = getTodayWeek().replace("요일","");
		// ------------------------------
		// 현재 시각의 년-월-일(요일) 을 문자로 리턴하기.
		// ------------------------------

		return year + "-" + month + "-" + date + "(" + week + ")";
	}


	//------------------------------------------------------------------------
	// 매개변수로 들어온 날짜문자가 오늘날짜와 동일하면, true 리턴하는 함수. 아니면 false 리턴.
	//------------------------------------------------------------------------
	function isToday( dateStr ){
		try{
			// ----------------------------------
			// 변수 arr 선언. dateStr 매개변수 안의 날짜 문자를 
			// "-" 기준으로 토막내어 Array 객체안에 담기.
			// ----------------------------------
			var arr = dateStr.split("-");
			// ----------------------------------
			// Array 객체 안의 배열변수 안의 데이터 꺼내어 year, month, date 변수에 저장하기.
			// String 객체의 trim 메소드 호출로 앞뒤 공백 제거하기.
			// ----------------------------------
			var year = arr[0];		//year = year.trim();		// trim() 앞뒤 공백 제거.
			var month = arr[1];		//month = month.trim();
			var date = arr[2];		//date = date.trim();
			// ----------------------------------
			// parseInt 내장함수 호출하여 
			// year, month, date 변수 안의 숫자문자를 정수 숫자로 바꾸기
			// ----------------------------------
			year = parseInt(year, 10);
			month = parseInt(month, 10);
			date = parseInt(date, 10);
			// ----------------------------------
			// 변수 today 선언, 오늘 날짜를 관리하는 Date 객체 생성하고 메위주를 today에 저장하기
			// Date 객체의 getFullYear 메소드 호출로 년도 얻어 변수 today_year 에 저장하기.
			// Date 객체의 getMonth 메소드 호출로 월 얻어 변수 today_month 에 저장하기.
			// Date 객체의 getDate 메소드 호출로 일 얻어 변수 today_date 에 저장하기.
			// ----------------------------------
			var today = new Date();
			var today_year = today.getFullYear();
			var today_month = today.getMonth()+1;
			var today_date = today.getDate();
			// ----------------------------------
			// 매개변수로 들어온 년월일 이 오늘잘짜의 년월일과 동일하면 true 리턴하기.
			// 아니면 false 리턴하기
			// ----------------------------------
			return year == today_year && month == today_month && date == today_date;
		}
		catch(e){
			alert("isToday 함수 에서 에러발생!")
			return false;
		}
	}

	//------------------------------------------------------------------------
	// 매개변수로 들어온 문자에서 모든 공백을 제거하고 그 후 문자를 리턴하기.
	//------------------------------------------------------------------------
	function deleteBlank( str ){
		try{	
			// str =undefined; 예외처리 작동하는지 테스트 하는 코드.

			// ----------------------------------------
			// 공백제거한 문자 저장할 변수 result 선언.
			// ----------------------------------------
			var result = "";
			// ----------------------------------------
			// 반복문 돌리면서 매개변수로 들어온 문자열 중 한개씩 접근해서 
			// 공백이 아닌 문자만 result 변수에 누적 시키기
			// ----------------------------------------
			for (var i=0; i<str.length; i++){
				// 만약 i 번째 문자가 공백이 아니면,
				// i번째 문자를 result 변수에 누적시키기.
				if(str.charAt(i) != " "){
					result = result + str.charAt(i);
				}
			}
			// ----------------------------------------
			// 변수 result 안의 데이터 리턴하기
			// ----------------------------------------
			return result;
		}	
		catch(e){
				alert("deleteBlank 함수에서 에러발생!")
				return str;
		}
	}
	
	// // 방법2. 예외처리는 되어있지 않음.
	// function deleteBlank( str ){
		
	// 	return str.split(" ").join("");
	// }


	//------------------------------------------------------------------------
	// D-Day 나오게 하기.
	//------------------------------------------------------------------------
	function get_dDay( dateStr ){

		try{
			// ----------------------------------
			// 변수 arr 선언. dateStr 매개변수 안의 날짜 문자를 
			// "-" 기준으로 토막내어 Array 객체안에 담기.
			// ----------------------------------
			var futureDay = dateStr.split("-");
			// ----------------------------------
			// Array 객체 안의 배열변수 안의 데이터 꺼내어 year, month, date 변수에 저장하기.
			// ----------------------------------
			var year = futureDay[0];		
			var month = futureDay[1];		
			var date = futureDay[2];		
			// ----------------------------------
			// parseInt 내장함수 호출하여 
			// year, month, date 변수 안의 숫자문자를 정수 숫자로 바꾸기
			// ----------------------------------
			year = parseInt(year, 10);
			month = parseInt(month, 10);
			date = parseInt(date, 10);
			// ----------------------------------
			// 변수 todayObj 선언, 오늘 날짜를 관리하는 Date 객체 생성하고 메위주를 todayObj 에 저장하기
			// 변수 x_dateObj 선언, 정수 숫자로 바꾼 year,month,date 로 Date객체 생성하고 대입.
			// 월 month 에 -1 하는것 잊지말기.
			// 변수 interval 선언하고, x_dateObj 와 todayObj 를 getTime() 메소드를 이용해 차이를 구하고 대입.
			// 소수점으로 나오는 남은날짜를 Math.ceil 로 올림하고 interval 변수에 대입해준다.
			// ----------------------------------
			
			var todayObj = new Date( );
			var x_dateObj = new Date(year,month-1,date);
			var interval = Math.ceil(   ( x_dateObj.getTime() - todayObj.getTime() )/(60*60*24*1000)   );

			// ----------------------------------
			// interval 변수안의 데이터 리턴하기.  
			// ----------------------------------
			return interval;
		}
		catch(e){
			alert( "get_dDay 함수에서 에러발생!" + e.message )
			return -1;
		}
	}


// *****************************************
// 매개변수로 들어온 [한글 이름]이 한글이면서 2~20자 사이면 true 리턴하기.
// 아니면 false 리턴하는 함수 선언.
// *****************************************
function isHangeulName( hangeulName ){
	return isValidPattern(/^[가-힣]{2,20}$/, hangeulName);
}


// *****************************************
// 매개변수로 들어온 [아이디] 유효성검사
// *****************************************
function isMem_id( mem_id ){
	return isValidPattern(/^[a-z][a-z0-9_]{4,9}$/, mem_id);
}

// *****************************************
// [암호] 유효성검사
// *****************************************
function isPwd( pwd ){
	return isValidPattern(/^[a-z0-9_]{5,8}$/, pwd);
}