■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문1> 웹브라우저(=WEB Browser) 란? 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    -----------------------------------------------------------------
    인터넷 망에서 URL 주소에 존재하는 [웹서버]로 [요청 메시지]를 전송하고,
    [응답 메시지]를 받아 그안에 존재하는 [HTML 소스]를 실행하여
    결과를 화면에 출력하는 클라이언트 쪽 SW를 말한다.  
    -----------------------------------------------------------------
    <예> Explore9, Explorer10, Explorer11, Chrome, Safari, Opera, Firefox, Edge    
    -----------------------------------------------------------------
 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문2> 웹서버(=WEB Server) 란? 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    -----------------------------------------------------------------
    [웹브라우저] 로 접속하는 [다수]의 [클라이언트]의 [요청 메시지] 을 받고,
    다수의 클라이언트에게 [동시에] [응답 메시지] 로 응답하는 SW 를 말한다.  
    -----------------------------------------------------------------
    웹서버 종류
    -----------------------------------------------------------------
        Weblogic        => 웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용.    ★★
        Websphere       => 웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용.  
        JBoss           => 웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용.   
        Tomcat          => 웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 연습용.    ★
        -----------------------------------------------------------------
        IIS             => 웹프로그래밍 자원으로 HTML, ASP, C#, 닷넷 을 사용한다. MS쪽.  
        -----------------------------------------------------------------
        Apache          => 웹프로그래밍 자원으로 HTML, PHP 를 사용한다.  
        -----------------------------------------------------------------
        NodeJS          => 웹프로그래밍 자원으로 자바스크립트(*.js) 를 사용한다.          ★
                        => <참고> React 가 NodeJS 위에서 작동된다.  
        -----------------------------------------------------------------
        기타 JEUS(Tmax), iPlanet, Oracle 9iAS 등 의 웹서버도 있다.    
        -----------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문3> [웹브라우저]와 [웹서버]의 통신 과정을 설명하면? 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

*******************************************************************
<1> 일반 유저가 [웹브라우저]에서 원하는 [웹서버]의 자원을 호출하기 위해 아래와 같은 [URL 주소]로 입력하고 엔터를 친다.
    이때, [요청메시지]를 가지고 [웹서버]에 접속을 시도한다.
*******************************************************************
    -----------------------------------------------------
    http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
    -----------------------------------------------------
    -----------------------------------------------------
    <참고> [요청 메시지]의 내용물? ★★★★★
    -----------------------------------------------------
        ----------------------------  
        URL 주소
        ----------------------------  
        [파라미터명] 과 [파라미터값]    => 클라이언트 쪽 입력양식 태그의 name값과 value값 을 말한다.  
                                      => URL 주소에 물음표 이후 문자열 중 xxx=yyy 가 있으면
                                         xxx 가 [파라미터명]이고 yyy 가 [파라미터값]이다.
        ----------------------------  
        [쿠키명]과 [쿠키값] 
        ----------------------------  
        [헤더명]과 [헤더값]            => 클라이언트 웹브라우저의 각종 정보,
        ----------------------------  
        기타 등등
        ----------------------------  
    -----------------------------------------------------
    <참고> : 웹서버포트번호 가 생략되면 :80 가 디폴트값이다.
    -----------------------------------------------------
    <참고> 웹서버의 호출자원명 없이 http://서버의도메인주소:웹서버포트번호 로 접속을 시도하면
           [웹서버]는 디폴트 대응 자원명을 호출한다.  
    -----------------------------------------------------
    <참고> URL 주소 중 http://서버의도메인주소 까지는 유일한 값이다.  
           즉, 중복되지 않는 유일한 대외적인 주소이다.
           만약, 서버의 도메인주소가 www 로 시작한다면 전세계의 유일한 주소이다.  
           만약, 서버의 도메인주소가 www 로 시작 안하면 국내의 유일한 주소이다.  
    -----------------------------------------------------
    <참고> URL 주소 중 http://서버의도메인주소 이후의 주소는 웹서버 내부의 주소이다.  
    -----------------------------------------------------

*******************************************************************
<2> 인터넷 망을 타고 가다 [DNS 서버]에 들려 아래와 같이 [URL 주소]가 바뀐다.
*******************************************************************
    -----------------------------------------------------
    http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
    -----------------------------------------------------
    ↓
    -----------------------------------------------------
    http://서버의도메인주소에대응하는IP주소:웹서버포트번호/서버의호출자원명
    -----------------------------------------------------
    DNS 서버에는 서버의 도메인주소 에 대응하는 IP 주소가 등록되어 있다.  

*******************************************************************
<3> [DNS 서버]를 출발하여 인터넷 망을 타고 가다 [IP 주소]를 소유한 [서버 운영체제]에 접속한다.  
*******************************************************************
    <참고> [서버 운영체제]는 대부분 [Unix] 또는 [서버용윈도우] 또는 [Linux] 이다.
           Linux 는 대규모가 아닌 중소기업용이다.  

*******************************************************************
<4> [서버 운영체제] 내부에 웹서버포트번호를 이용하는 [웹서버]에 접속한다.  
*******************************************************************

>>>> 5번 부터 개발자가 신경 써야 한다.  
*******************************************************************
<5> [웹서버]가 URL 주소에 있는 [서버의호출자원명]에 대응하는 [웹프로그래밍 자원]을 호출한다.  
    이때, [웹프로그래밍 자원]에게 [요청 메시지] 안의 파라미터명, 파라미터값, 쿠키명, 쿠키값 이 전달된다.  
*******************************************************************
    -----------------------------------------------------
    파라미터명, 파라미터값은 DB 연동 시 사용한다.  
    -----------------------------------------------------
    바로 파라미터명 이 오라클  테이블의 컬럼명이고, 
    파라미터값은 테이블에 입력 또는 삭제 또는 수정 또는 검색할 데이터다.  
    -----------------------------------------------------
    쿠키명, 쿠키값은 아주 가끔 DB 연동 시 사용한다.  
    -----------------------------------------------------
    [웹프로그래밍 자원]이 JSP 라면 xxx.jsp 가 호출된다.
    [웹프로그래밍 자원]이 자바의 객체라면 특정 메소드가 실행된다.  

*******************************************************************
<6> [웹프로그래밍 자원]이 필요에 따라 파라미터명, 파라미터값을 가지고 DB 연동(입력,수정,삭제,검색)을 하고
    그 결과물을 HTML 소스에 반영하여 HTML 소스를 생성한다.  
*******************************************************************
    -----------------------------------------------------
    <참고> DB 연동이 필요없는 경우 HTML 소스에 DB 연동 결과물이 반영되지 않을수도 있다.  
    -----------------------------------------------------
    <참고> 스프링프레임워크에서는 필요에 따라 HTML 소스가 아닌 JSON 을 생성하기도한다.  
    -----------------------------------------------------
    <참고> 웹프로그래밍 자원을 어떤 구조로 만드냐에 따라 아래와 같은 [웹 개발 패턴]으로 나뉜다.  
    -----------------------------------------------------
        -----------------------------------------------------
        Model1 패턴
        -----------------------------------------------------
            ⅰ 클라이언트의 웹브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹서버에 접속한다.
            ⅱ [웹서버]에서 [URL 주소]에 대응하는 xxx.jsp 파일이 실행된다.
            ⅲ xxx.jsp 파일이 실행된 후 HTML 소스가 생성된다.
            ⅳ [웹서버]가 [응답메시지]에 HTML 소스 등을 담아 클라이언트의 웹브라우저에게 [응답메시지]를 전송한다.
            ⅴ 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
            -------------------------------------------------
            <장점> 프로젝트 규모가 작고, 유지보수가 많지 않을 경우 작업 속도가 매우 빠르다.    
            <단점> 프로젝트 규모가 크고, 유지보수가 많을 경우 사용하기 힘들다.
            -------------------------------------------------

        -----------------------------------------------------
        Model2 패턴
        -----------------------------------------------------
            ⅰ 클라이언트의 웹브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
               xxx.do 는 xxx, xxx.html, xxx.action 등으로 표현되는 가짜 자원명이 있다. 

            ⅱ [웹서버]의 [Servlet 객체]의 특정 메소드가 호출된다. 모든 형태의 URL 주소 접속 시 이 Servlet 객체가 맞이 한다.  
            ⅲ Servlet 객체의 특정 메소드에서 [URL 주소]에 대응하는 자바 객체(=JavaBean)의 메소드를 호출한다.
               이 자바 객체(=JavaBean) 메소드 안에서 DB 연동을 하고 결과물을 Servlet 객체에 리턴한다.  


            ⅳ Servlet 객체의 특정 메소드에서 [URL 주소]에 대응하는 xxx.jsp 파일을 호출한다.  
            ⅴ xxx.jsp 파일이 실행되면서 DB 연동 결과물을 HTML 소스에 반영하여 HTML 소스를 생성한다.  
            ⅵ [웹서버]가 [응답메시지]에 HTML 소스 등을 담아 클라이언트의 웹브라우저에게 [응답메시지]를 전송한다.
            ⅶ 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.  
            -------------------------------------------------
            <단점>
            -------------------------------------------------
                Model1 패턴 보다 유지보수성이 좋아졌지만,
                시대의 흐름에 따라 프로젝트 규모가 커지기 시작하자 또 유지보수성이 현저히 낮아지게 된다.
                왜? Model1 보다 체계적이기는 하나 Model1 과 동일한 점은 개발자 코딩 개성이 들어간다.  
                즉, 코딩 습관이나 사용하는 객체가 개발자 개성에 따라 다 다르다. 
            -------------------------------------------------
            <참고> [Servlet 객체]란 [HttpServlet 클래스]를 상속받은 객체를 말한다.  
            -------------------------------------------------
                ---------------------------------------------
                <예>
                ---------------------------------------------
                public Xxx extends HttpServlet{
                        ~~~
                }
                ---------------------------------------------
                > Xxx 클래스가 객체화 된다면, 통상적으로 [Servlet 객체]라고 지칭한다.  
                > Spring MVC 패턴에서는 [Servlet 객체]를 개발자가 만들지 않고, Spring 쪽에서 제공한다.  
                ---------------------------------------------

        -----------------------------------------------------
        Spring MVC 패턴
        -----------------------------------------------------
            Spring framework 에서 지원하는 웹 개발 패턴이다.  
            작동 구조는 Model2 방식과 거의 동일하나 더 많은 자바 객체가 동원된다.  
            Model2 방식의 자바 객체(=JavaBean)와 비슷한 자바 객체가 Spring MVC 방식에서는 더 세분화되어 여러 층으로 나뉜다.  
            DB 연동의 관리를 쉽게하기 위함이다. 
            현재 대기업이나 공기업 프로젝트에서는 주로 사용하는 개발 패턴이다.  
            
            <참고> 추후 문제에서 따로 자세히 서술한다.  
            -------------------------------------------------
            <장점>
            -------------------------------------------------
                프로젝트 규모가 클수록 유지보수성이 좋다.  
                Spring MVC 에서 정한 코딩 패턴과 정해진 객체를 사용하기 때문이다.  
                자바 객체 안에서 어노테이션(=anotation)을 적극적으로 사용하여 자바의 날 코딩이 줄어든다.  
                속성변수의 자료형으로 [인터페이스]를 적극적으로 사용하여 객체 간의 [결합도]를 
                    약하게 하여 [연쇄 수정의 범위]를 줄인다. (=유지보수성 증가)
                DB 연동 시 작성하는 SQL 구문을 자바 객체 안에서 하지 않고 XML 로 빼서 작업하기도 한다. 
                    이때 [mybatis] 라는 프레임워크를 사용한다. 
                ---------------------------
                <참고> 어노테이션(anotation)
                ---------------------------
                    클래스명 앞, 메소드 앞, 속성변수 앞, 매개변수 앞에 붙어
                    특정 기능을 부여하는 자바의 표기법.  

            -------------------------------------------------
            <단점>
            -------------------------------------------------
                환경 설정이 복잡하다.
                작동 원리가 복잡하기에 사전 학습이 힘들다. 
                규모가 작거나 유지보수가 많이 필요하지 않은 경우 프로젝트에서 어울리지 않는다.
                규모가 크면 DB의 테이블 개수가 많아진다.
                즉, 프로젝트의 규모는 DB의 테이블 개수와 비슷하다.    

*******************************************************************
<7> DB 연동 결과물이 만영된 HTML 소스를 [웹서버]로 전해준다
*******************************************************************

*******************************************************************
<8> [웹서버]는 [응답 메시지]를 만든다.  
*******************************************************************
    ----------------------------
    [응답 메시지]의 내용물
    ----------------------------
        DB연동 결과물을 반영한 HTML 소스   
        쿠키명과 쿠키값   
        헤더명과 헤더값   => 웹서버에 관련된 정보.  [요청 메시지]와 다른것을 기억.  
        접속자가 요청한 자원의 존재 여부 및 재 접속 여부.  

*******************************************************************
<9> [웹서버]는 [웹브라우저]에게 [응답 메시지]를 전송한다.  
*******************************************************************

*******************************************************************
<10> [응답 메시지]를 받은 [웹브라우저]는 [응답 메시지]에 내장된
     요청 자원의 존재 여부를 확인하고 난 후, 있다면
     HTML 소스를 실행하여 [웹브라우저] 화면에 출력한다.
*******************************************************************
    <참고>
    요청 자원의 존재 여부 확인 시 없다면
    에러 메시지가 존재하는 자체 준비 HTML 문서를 실행하여 화면에 출력한다.  


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문4> 위 [웹브라우저]와 [웹서버]의 통신 과정에서 개발자가 기억할 것과 작업해야할 것을 정리하면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    신경 써야 할 과정번호
        <5>  <6>
    ------------------------------------
    작업해야할 것.
    ------------------------------------
        --------------------------------
        접속 [URL 주소]를 기억.
        --------------------------------
        [URL 주소]에 대응하는 자바 객체(=JavaBean)의 전신인 클래스 제작.
        --------------------------------
        DB 연동 시 필요한 SQL 구문 제작.  
        --------------------------------
        html 소스를 생성하는 xxx.jsp 제작.  
        --------------------------------


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문5> [웹브라우저]가 [웹서버]로 보낸 [요청메시지]를 관리하는 것이 무엇입니까?  (입)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    --------------------------------------------------------------
    [HttpServletRequest] 객체이다. 웹서버가 지원해주는 객체이다.  
    --------------------------------------------------------------
    <참고> JSP 페이지에서는 [HttpServletRequest] 객체를 request 객체라고 부르기도 한다.  
           JSP 페이지에서는 request 변수안에 [HttpServletRequest] 객체의 메모리 위치 주소값이 저장되어 제공된다.  
           이 변수 이름을 객체이름으로 부르기도 합니다.  
    --------------------------------------------------------------
    [HttpServletRequest] 객체 메소드   ★★★★★
    --------------------------------------------------------------
        -------------------------------------
        String getParameter( "파라미터명" )
        -------------------------------------
            [요청 메시지] 안에 담긴 [파라미터명]에 대응하는 [파라미터값]을 String 형으로 리턴한다.  
            [파라미터명]이 없을 경우 에러발생하지 않고 [null 값]이 리턴됨.  
            동일한 [파라미터명]이 2개 이상일 경우 첫번째의 파라미터명의 파라미터값만 리턴한다. 
            //ex) 파라미터명이 2개 이상인 checkBox 입력양식.  
                ---------------------------------------------------------------------
                <예>
                ---------------------------------------------------------------------
                아이디 : <input type="text" name="uid">
                암  호 : <input type="password" name="pwd">
                ---------------------------------------------------------------------
                위의 html 소스의 웹화면 실행결과물에서 아이디는 "abc", 암호는 "123" 을 입력한 상태에서
                특정 웹서버에 접속하면
                이때 웹서버로 전달되는 요청메시지 안의 파라미터명과 파라미터값은 아래 처럼 저장되어 있다.  

                    "uid=abc&pwd=123"

                위에서 uid, pwd 은 파라미터명이 되고, abc 나 123 는 파라미터값이 된다. 
                즉, uid 이란 파라미터명에는 "abc" 가 대응되는 셈이다.  
                즉, pwd 이란 파라미터명에는 "123" 가 대응되는 셈이다.  

                웹서버에서 uid 이란 파라미터명에 대응하는 "abc" 을 꺼낼려면 아래처럼 코딩한다.  
                    -----------------------------------------------------------
                    String uid = request.getParameter( "uid" );
                    -----------------------------------------------------------
                        request 변수에는 [HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.   

                웹서버에서 pwd 란 파라미터명에 대응하는 "123" 을 꺼낼려면 아래처럼 코딩한다.
                    -----------------------------------------------------------
                    String pwd = request.getParameter( "pwd" );
                    -----------------------------------------------------------
                        request 변수에는 [HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.   

                ---------------------------------------------------------------------
                <예> radio button
                ---------------------------------------------------------------------
                <input type="radio" name="addr" value="서울">서울
                <input type="radio" name="addr" value="경기">경기
                <input type="radio" name="addr" value="인천">인천
                ---------------------------------------------------------------------
                위의 html 소스의 웹화면 실행결과물에서 "서울" 을 체크, 서울 을 체크한 상태에서 
                특정 웹서버에 접속하면
                이때 웹서버로 전달되는 요청메시지 안의 파라미터명과 파라미터값은 아래 처럼 저장되어 있다.  

                    "addr=서울"

                위에서 addr 은 파라미터명이 되고, "서울" 는 파라미터값이 된다. 
                즉, addr 이란 파라미터명에는 "서울" 가 대응되는 셈이다.  
                웹서버에서 addr 이란 파라미터명에 대응하는 파라미터값 "서울" 을 꺼낼려면
                아래처럼 코딩한다.  
                    -----------------------------------------------------------
                    String addr = request.getParameter( "addr" );
                    -----------------------------------------------------------
                        request 변수에는 [HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.   



        -------------------------------------
        String[] getParameterValues( "파라미터명" )
        -------------------------------------
            ▶ [요청 메시지] 안의 파라미터명에 대응하는 파라미터값을 String[] 형으로 리턴한다.  
            ▶ 주로 checkbox 에서 체크된 데이터를 받아올 때 사용하는 메소드이다.  
            checkbox 입력 양식이 2개 이상 있을 경우 name 값이 동일하고, value 값이 다르다.  
                ---------------------------------------------------------------------
                <예>
                ---------------------------------------------------------------------
                <input type="checkbox" name="skill" value="JSP">JSP
                <input type="checkbox" name="skill" value="ASP">ASP
                <input type="checkbox" name="skill" value="PHP">PHP
                ---------------------------------------------------------------------
                위의 html 소스의 웹화면 실행결과물에서 JSP 를 체크, ASP를 체크한 상태에서 
                특정 웹서버에 접속하면
                이때 웹서버로 전달되는 요청메시지 안의 파라미터명과 파라미터값은 아래 처럼 저장되어 있다.  

                    "skill=JSP&skill=ASP"

                위에서 skill 은 파라미터명이 되고, JSP 나 ASP 는 파라미터값이 된다. 
                즉, skill 이란 파라미터명에는 두 개의 파라미터값 JSP, ASP 가 대응되는 셈이다.  
                웹서버에서 skill 이란 파라미터명에 대응하는 두 개의 파라미터값 JSP, ASP 을 꺼낼려면
                아래처럼 코딩한다.  
                    -----------------------------------------------------------
                    String[] skills = request.getParameterValues( "skill" );
                    -----------------------------------------------------------
                        request 변수에는 [HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.   
                        결국, 배열변수 skills[0] 에 저장된 데이터는 "JSP" 이다.  
                        결국, 배열변수 skills[1] 에 저장된 데이터는 "ASP" 이다.  

                    > 변수이름 아래처럼 주는것이 구분하기 쉽다.  
                    String[] skillArr = request.getParameterValues( "skill" );
                    String[] skill_arr = request.getParameterValues( "skill" );
                    -----------------------------------------------------------

                        
        -------------------------------------
        void setAttribute( "키값문자열", 저장객체 )   ★★★★★ (입)
        -------------------------------------
            [키값문자열]에 [저장객체]를 연결하여 저장한다. HashMap 객체와 동일한 역할을 한다.  
            매개변수로 전달되는 저장객체는 주로 DB 연동 결과물이다.  

            DB 연동이 insert, update, delete 일 경우 [저장객체]는 [정수]이다.  
            DB 연동이 select 일 경우 DB 연동 결과물은 검색 결과에 따라 아래 처럼 다르다.  
                ------------------------------------------------------------------------
                1행 1열 검색된 경우 => DB 연동 결과물은 [정수 또는 실수 또는 String] 이다.    
                1행 n열 검색된 경우 => DB 연동 결과물은 [HashMap 객체] 이다.    
                n행 1열 검색된 경우 => DB 연동 결과물은 [ArrayList, LinkedList, 배열 객체] 이다.    
                n행 m열 검색된 경우 => DB 연동 결과물은 List<Map<String,String>> 이다.    
                ------------------------------------------------------------------------
            
            =================================================================================
            SQL 구문의 종류             SQL 구문 실행결과(=DB 연동 결과물)를 저장하는 자바 객체 자료형
            =================================================================================
            insert,update,delete       int
            ---------------------------------------------------------------------------------
            1행 1열 검색 select         int 또는 double 또는 String
            ---------------------------------------------------------------------------------
            1행 n열 검색 select         HashMap 객체   
            ---------------------------------------------------------------------------------
            n행 1열 검색 select         ArrayList 또는 LinkedList 또는 배열 객체
            ---------------------------------------------------------------------------------
            n행 m열 검색 select         List<Map<String,String>> 객체
            ---------------------------------------------------------------------------------


        /*  참고, new Integer(deptInsertCnt) 설명.  
            ----------------------------------------------------------------
            <예> insert 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                insert into dept values(50,'기획부','서울');
                위 insert 구문에 의해 입력된 행의 개수는 1개이다.
                결국 insert 구문을 실행한 결과물은 int 형이다.
                자바변수 deptInsertCnt 에  insert 구문을 실행한 결과물을 저장한 경우
                setAttribute 메소드는 다음 처럼 코딩한다
                ----------------------------------------------------------------
                int deptInsertCnt = 위 insert 구문에 의해 입력된 행의 개수;
                request.setAttribute( "deptInsertCnt", deptInsertCnt );
                request.setAttribute( "deptInsertCnt", new Integer(deptInsertCnt) );
        */


            ----------------------------------------------------------------
            <예> insert 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                insert 구문
                    insert into dept values(50,'기획부','서울');
                insert 구문의 실행 결과가 저장되는 변수 
                    int deptInsertCnt = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "deptInsertCnt", deptInsertCnt );

            ----------------------------------------------------------------
            <예> update 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                update 구문
                    update dept set loc='부산' where dep_no=50; 
                update 구문의 실행 결과가 저장되는 변수 
                   int deptUpCnt = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "deptUpCnt", deptUpCnt );
            ----------------------------------------------------------------
            <예> 1행 1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문  
                    select count(*) from employee where salary >= 4000
                select 구문의 실행 결과가 저장되는 변수 
                   int empCnt = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "empCnt", empCnt );
            ----------------------------------------------------------------
            <예> 1행 1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문  
                    select dep_name from dept where dep_no = 40
                select 구문의 실행 결과가 저장되는 변수 
                   String depName = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "depName", depName );
            ----------------------------------------------------------------
            <예> 1행 1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문  
                    select avg(salary) from employee
                select 구문의 실행 결과가 저장되는 변수 
                   double avgSalary = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "avgSalary", avgSalary );

            ----------------------------------------------------------------
            <예> 1행 n열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문 
                    select emp_no, emp_name, salary from employee where emp_no = 3;
                select 구문의 실행 결과가 저장되는 변수 
                    HashMap empMap = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "empMap", empMap );

            ----------------------------------------------------------------
            <예> n행 1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문 
                    select emp_name from employee where jikup = '과장';
                select 구문의 실행 결과가 저장되는 변수 
                    ArrayList empNames = ~;
                    ArrayList empNameList = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "empNames", empNames );
                    request.setAttribute( "empNameList", empNameList );

            ----------------------------------------------------------------
            <예> n행 m열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
            ----------------------------------------------------------------
                select 구문 
                    ----------------------------------------------------
                    보여줄 컬럼명
                        직원번호, 직원명, 소속부서명
                    조건
                        연봉이 3000 이상인직원
                    ----------------------------------------------------
                    select 
                        e.emp_no, e.emp_name, d.dep_name 
                    from 
                        employee e, dept d 
                    where 
                        e.det_no = d.dep_no and e.salary >= 3000;
                    ----------------------------------------------------
                    > ANSI join
                    select e.emp_no, e.emp_name, d.dep_name, e.salary 
                    from employee e inner join dept d 
                    on e.dep_no = d.dep_no 
                    where e.salary >= 3000;
                    ----------------------------------------------------
                select 구문의 실행 결과가 저장되는 변수 
                    List<Map<String,String>> empList = ~;
                setAttribute 메소드는 호출 코딩
                    request.setAttribute( "empList", empList );


                &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                `<<>>` 설명을 위한 자바내용.  `제네릭스`

                ```java
                ArrayList list = new ArrayList();
                list.add("이름1");
                list.add("이름2");
                list.add("이름3");
                list.add( new Integer(kor) );

                String name1 = (String)list.get(0);
                String name2 = (String)list.get(1);
                String name3 = (String)list.get(2);
                Integer kor  = (Integer)list.get(3);
                ```
                > `get()` 메서드 리턴값 => `Object`  

                > 다량의 내용을 저장하기 때문에,   
                > 꺼낼 때는 뭘 꺼내는지 모르기 때문에,   
                > 합당하게 형 변환을 시켜주어야 한다.   

                > 꺼낼때는 형변환을 해주어야 한다.   

                > 위와같이 하면 형변환이 힘들다. 자료가 많아지면 다 기억못하므로.    

                ```Java
                ArrayList list = new ArrayList();
                list.add("이름1");
                list.add("이름2");
                list.add("이름3");

                String name1 = (String)list.get(0);
                String name2 = (String)list.get(1);
                String name3 = (String)list.get(2);
                //------------------------------------
                ArrayList<String> list = new ArrayList<String>();
                list.add("이름1");
                list.add("이름2");
                list.add("이름3");

                String name1 = list.get(0);
                String name2 = list.get(1);
                String name3 = list.get(2);
                //------------------------------------
                //------------------------------------
                //------------------------------------
                HashMap map = new HashMap();
                map.put( "이름", "홍길동" );
                map.put( "주소", "가산동" );
                map.put( "키", new Integer(182) );

                String name = (String)map.get("이름");
                String addr = (String)map.get("주소");
                Integer tall = (integer)map.get("키");
                //------------------------------------
                HashMap<String,String> map = new HashMap<String,String>();
                map.put( "이름", "홍길동" );
                map.put( "주소", "가산동" );

                String name = map.get("이름");
                String addr = map.get("주소");

                ```
                > `제네릭스`를 쓰면 꺼낼 때 형변환을 해주지 않아도 된다.      
                > `제네릭스`를 써서 객체생성을 하면 꺼낼때 형변환 필요 없다.      
                > 특정 유형만 저장하도록 `제네릭스` `<   >` 로 지정.  

                > 위에서는 String 만 저장하도록 했음.    

                > 개발자가 직접 자료형을 설정.    
                &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                ----------------------------------------------------------
                ----------------------------------------------------------
                ----------------------------------------------------------
                Map<String,String> map1 = new HashMap<String,String>();
                map1.put( "이름", "홍길동" );
                map1.put( "주소", "가산동" );

                Map<String,String> map2 = new HashMap<String,String>();
                map2.put( "이름", "최현준" );
                map2.put( "주소", "가산동" );

                Map<String,String> map3 = new HashMap<String,String>();
                map3.put( "이름", "한승태" );
                map3.put( "주소", "김포동" );

                List<Map<String,String>> list = new ArrayList<Map<String,String>>;
                list.add( map1 );
                list.add( map2 );
                list.add( map3 );


        -------------------------------------
        Object getAttribute( "키값문자열" )   ★★★★ (입)
        -------------------------------------
            setAttribute( "키값문자열", 저장객체 )로 저장된 [저장객체]를 Object 타입으로 리턴한다.                  
            setAttribute( "키값문자열", 저장객체 )로 저장된 [저장객체]가 뭔지 모르는 상태에서 
            getAttribute 로 꺼냈을 때 리턴 자료형을 무엇으로 써야되는지의 문제는 Object 타입으로 해결된다.  
            모든 클래스 최상위 조상은 바로 Object 클래스이기 때문이다.
            <주의> getAttribute( "empList" ) 에서 "empList" 라는 키값이 없을 경우
                   null 이 리턴된다. 에러가 발생하지는 않는다.  

        -------------------------------------
        void removeAttribute( "키값문자열" )   
        -------------------------------------
            setAttribute( "키값문자열", 저장객체 )로 저장된 [저장객체]를 삭제한다.     

        -------------------------------------
        HttpSession getSession( )
        -------------------------------------
            HttpSession 객체의 메위주를 리턴한다.  

        -------------------------------------
        Cookie[] getCookies( )
        -------------------------------------
            Cookie 객체가 저장된 배열 객체를 리턴한다.  
            ------------------------------
            Cookie 객체란?
            ------------------------------
                웹브라우저가 웹서버에게 보낸 [요청 메시지] 안에 저장된 쿠키값을 관리하는 객체이다.  
                1개의 쿠키값을 1개의 Cookie 객체가 관리한다.  

        -------------------------------------
        StringBuffer getRequestURL( )
        -------------------------------------
            -------------------------------------------------------
            웹브라우저가 웹서버에 접속할 때 사용한 자원의 풀 주소 StringBuffer 형으로 리턴한다.    
            즉, 아래 같은 웹서버 자원을 찾기 위한 전체 주소 
            -------------------------------------------------------
            <예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명    
            -------------------------------------------------------        
            ------------------------------
            StringBuffer 객체란?  
            ------------------------------
                String 객체 처럼 문자열을 관리하는 객체이다.  

        -------------------------------------
        String getRequestURI( )
        -------------------------------------
            -------------------------------------------------------
            URL 중에    :웹서버포트번호    이후의 주소를 String 으로 리턴한다.  
            -------------------------------------------------------
            <예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명     중에    
                 /웹서버의호출자원명  이    URI   이다.  
            ------------------------------------------------------- 
            <주의> URI 는 / 로 시작한다.  
            ------------------------------------------------------- 

        -------------------------------------
        String getContextPath( )    ★★★★★ (입)
        -------------------------------------
            웹브라우저가 접속하는 웹서버의 [컨텍스트루트명]을 문자열로 리턴.  

            컨텍스트루트명 은 프로젝트명을 의미한다.  
            하나의 웹서버 안에 2개 이상의 프로젝트가 존재하도록 설계한다면 
            아래와 같은 URL 주소로 접속해야 한다.  
                http://서버의도메인주소:웹서버포트번호/프로젝트명1/웹서버의호출자원명   
                http://서버의도메인주소:웹서버포트번호/프로젝트명2/웹서버의호출자원명   
            이 경우 컨텍스트루트명은 /프로젝트명1  또는  /프로젝트명2   가 된다.  

            만약 하나의 웹서버 안에 1개만의 프로젝트가 존재한다면
            아래와 같이 프로젝트명이 생략되게 할 수 있다.  
                http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명   
            이 경우 컨텍스트루트명은 없는게 아니라  /  가 된다.  
 
        -------------------------------------
        String getServerName( )
        -------------------------------------
            웹서버의 도메인명을 문자열로 리턴.    
            ------------------------------------------------------- 
            <예> http://www.naver.com 에서 
            ------------------------------------------------------- 
                getServerName( ) 메소드 호출 시    www.naver.com    가 리턴된다.

        -------------------------------------
        String getRemoteAddr( )
        -------------------------------------
            웹서버에 접속한 클라이언트의 IP 주소를 문자열로 리턴.  

            <예> 192.168.0.123

        -------------------------------------
        int getServerPort( )
        -------------------------------------
            웹서버가 사용하는 포트 번호를 리턴. <예> 8080, 80

        --------------------
        -------------------------------------
        void setCharacterEncoding( "문자셋" )
        -------------------------------------
            클라이언트가 전송한 [파라미터값]의 인코딩 방식을 설정한다.  
            즉, 무슨 인코딩 방식으로 인코딩 했는지 설정을 해줘야 디코딩 할 때 참고해서 원래 문자열로 복원할 수 있다.  
            ---------------------------------------------
            <예> request.setCharacterEncoding("UTF-8");
            ---------------------------------------------
                웹서버야... 클라이언트가 보낸 파라미터값은 UTF-8 이라는 인코딩 기법으로 부호화 됐단다!
                디코딩으로 원래 문자열로 복원할 때 참고해서 디코딩해다오!  
                이 설정을 안하면 디코딩할 때 한글 같은 경우는 깨져서 복원되기도 한다.  
                <참고>
                Spring MVC 에서는 이 메소드를 호출하지 않는다. 개발자가 간단한 설정만 해주면
                Spring framework 가 알아서 해준다.  
                Model1 또는 Model2 방식의 개발에서는 반드시 개발자가 코딩해서 호출하는 메소드이다.  



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문6> [웹서버]가 [웹브라우저]로 보내는 [응답메시지]를 관리하는 것이 무엇입니까?  (입)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    --------------------------------------------------------------
    [HttpServletResponse] 객체이다. 웹서버가 지원해주는 객체이다.  
    --------------------------------------------------------------

    --------------------------------------------------------------
    [HttpServletResponse] 객체 메소드.  
    --------------------------------------------------------------
        -------------------------------------
        void sendRedirect( "URL주소" )  ★★★
        -------------------------------------
            ▶️ 클라이언트의 웹브라우저에게 지정한 URL로 페이지로 이동을 요청한다.
            ▶️ sendRedirect 메소드 호출되면 [응답메시지]에 301 이란 상태정보가 저장되고,
               이 [응답 메시지]를 받은 웹브라우저는 바로 매개변수로 전해준 URL 주소로 웹서버에 재접속한다.  
            <주의> 이 때 웹브라우저는 먼저 [응답 메시지] 안의 HTML 소스를 모두 실행한 후 이 URL 주소로 웹서버에 재접속한다.  
            
            > 긴박하고 특이한 상황이 발생했을 때 다시 강제적으로 URL주소로 재접속하게 만드는 기능.   

        -------------------------------------
        void setContentType( type )  
        -------------------------------------
            ▶️ [응답 메시지]에 저장할 [HTML 소스]의 [문서종류], [문자셋]을 지정한다.    
            ▶️ <예> response.setContentType("text/html;charset=UTF-8");    
            ▶️ <참고> spring MVC 패턴 사용 시 개발자가 호출하지 않아도 spring 쪽에서 알아서 세팅해 준다.     

        -------------------------------------
        void addCookie( Cookie cookie ) ★★★
        -------------------------------------
            ▶️ 매개변수로 전해준 Cokkie 객체가 소유한 [쿠키명]과 [쿠키값]을 [응답 메시지]에 저장한다. 
               추후 [응답 메시지]를 받은 웹브라우저는 이 [쿠키명]과 [쿠키값]을 클라이언트 쪽에 파일로 저장한다.  
            -----------------
            <예> 
            -----------------
                Cookie cookie = new Cookie( "uname", URLEncoder.encode("홍길동","EUC-KR") );
                cookie.setMaxAge(30*60);
                response.addCookie(cookie);






■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문7> 임은지 씨가 네이버의 [웹서버]에 접속해서 로그인을 했다.   
      갑자기 백신 생각이 나서 백신 접종 사이트로 이동해서 접종예약을 했다.  
      다시 네이버로 접속했더니, 로그인 상태였다.  
      어떻게 네이버 웹서버에서 내가 재 접속한걸 알고 로그인 상태를 유지하고 있을까?  
      왜그럴까?     (입)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    [웹브라우저]와 [웹서버]의 [연결 상태]를 관리하는 객체 때문이다. 
    그것이 바로, 
    --------------------------------------------------------------
    [HttpSession] 객체이다. 웹서버가 지원해주는 객체이다.   
    --------------------------------------------------------------
    <참고> [웹브라우저]와 [웹서버]의 [연결 상태]를 `세션(=session)`이라고 부른다.  

    --------------------------------------------------------------
    [웹브라우저]와 [웹서버]의 [연결 상태]를 관리하는 원리   ★★★★★ 입사시험문제 (입), (솔루션)
    --------------------------------------------------------------
        --------------------------------------------------------------
        <1> [클라이언트]가 종료된 [웹브라우저]를 실행 한 후 URL 을 입력하고 [웹서버]에 접속한다.  
        --------------------------------------------------------------
        <2> [웹서버]가 [HttpSession 객체]를 생성한다. [HttpSession 객체]는 [고유 아이디]를 가지고 있다.   
            개발자 코딩에 의해 [HttpSession 객체]에 원하는 데이터를 저장한다.  
        --------------------------------------------------------------
        <3> [웹서버]가 [응답 메시지]를 전송한다.
            이때 [응답메시지] 에는 [HttpSession 객체]의 [고유아이디]가 [쿠키]로 저장되어 있다.
        --------------------------------------------------------------
        <4> [웹브라우저]가 [응답메시지]를 받고, [응답메시지]안의 [고유 아이디]가 저장된 [쿠키]를 꺼내서 웹브라우저의 메모리 공간에 저장시킨다. 
            원래 쿠키값은 파일로 저장되는데, [고유 아이디]가 저장된 [쿠키]는 웹브라우저의 메모리 공간에 저장된다.  
            메모리 공간에 저장된다는 말은 웹브라우저가 종료되면 이 쿠키값도 삭제된다는 의미이다.  
        --------------------------------------------------------------
        <5> [클라이언트]의 [웹브라우저]가 URL을 입력하고 [요청 메시지]를 가지고 [웹서버]에 [재접속]한다.  
            이때, [요청 메시지]에는 쿠키로 저장된 [고유 아이디]가 들어 있다.
            만약, [요청 메시지]에는 쿠키로 저장된 [고유 아이디]가 없다면 <2>번 절차가 실행된다.     
            만약, [웹서버] 안에 [고유 아이디]를 가진 HttpSession 객체가 없다면 <2>번 절차가 실행된다. 
            만약, [웹서버] 안에 [고유 아이디]를 가진 HttpSession 객체가 수명이 다해서 제거된다면 <2>번 절차가 시행된다.  //로그인 유지 타임아웃.     
            HttpSession 객체의 수명은 코딩에 의해 설정된다.  
        --------------------------------------------------------------
        <6> [웹서버]는 [요청 메시지] 안의 [고유 아이디] 쿠키값을 꺼내어 
            이 [고유아이디]를 가진 HttpSession 객체를 찾아 대응시킨다.  
            [HttpSession 객체]에서 아까 접속 시 저장된 데이터를 꺼내서 어떤 작업을 한다.    
        --------------------------------------------------------------









































































■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


●


▶️































